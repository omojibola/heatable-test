import Head from 'next/head';
import dynamic from 'next/dynamic';
import moment from 'moment';
import { Inter } from '@next/font/google';
import styles from '@/styles/Home.module.css';
import { getStats } from '@/apiActions/statsServices';
import { useState } from 'react';
import Progress from '@/components/Progress/Progress';
import Spinner from '@/components/Spinner/Spinner';
import toast from 'react-hot-toast';

const CardView = dynamic(
  () => {
    return import('../components/CardView/CardView');
  },
  { ssr: false }
);

const inter = Inter({ subsets: ['latin'] });

export default function Home({ data }) {
  const [selectedView, setSelectedView] = useState('list');
  const [selectedCharacter, setSelectedCharacter] = useState({});
  const [stats, setStats] = useState([]);
  const [loading, setLoading] = useState(false);

  //get stats for selected pokemon
  const displayStats = async (url) => {
    setLoading(true);
    let res = await getStats(url);
    setStats(res);
    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>Heatable frontend test</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <div className={styles.top}>
          <p style={{ fontWeight: '200', fontSize: '10px' }}>
            {moment().format('lll')}
          </p>
        </div>
        <div className={styles.logo}>
          <h2 className='logo-text'>HP TEST</h2>
          <p style={{ fontWeight: '200', fontSize: '13px' }}>
            HEATABLE FRONTEND TEST
          </p>
        </div>

        <div className={styles.selection_list}>
          <div
            className={
              selectedView === 'card' ? styles.selected_item : styles.item
            }
            onClick={() => {
              setSelectedView('card');
              toast(
                <p style={{ fontSize: '14px' }}>
                  Swipe on character name to flick through cards
                </p>
              );
            }}
          >
            <p>Card View</p>
          </div>
          <div
            className={
              selectedView === 'list' ? styles.selected_item : styles.item
            }
            onClick={() => setSelectedView('list')}
          >
            <p>List View</p>
          </div>
        </div>
        {selectedView === 'list' && (
          <div className={styles.display_flex}>
            <div className={styles.container}>
              <div className={styles.container_list}>
                <div className={styles.container_list_inner}>
                  {/* <input placeholder='Search characters' /> */}
                  <div className={styles.container_list_inner_header}>
                    <p>Name</p>
                  </div>

                  <div className={styles.container_list_inner_content}>
                    {data?.results?.map((el) => (
                      <p
                        className={`${
                          selectedCharacter?.name === el?.name &&
                          styles.active_char
                        }`}
                        onClick={() => {
                          setSelectedCharacter(el);
                          displayStats(el?.url);
                        }}
                      >
                        {el?.name}
                      </p>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            <div className={styles.stats_container}>
              {selectedCharacter?.name && (
                <h2>{`${selectedCharacter?.name}'s stats`}</h2>
              )}
              <div className={styles.stats_container_inner}>
                {!selectedCharacter?.name ? (
                  <div className='empty'>
                    <p>Select a character to see stats</p>
                  </div>
                ) : loading ? (
                  <Spinner />
                ) : (
                  stats?.map((el, idx) => (
                    <div
                      className={styles.stats_container_inner_card}
                      key={idx}
                    >
                      <p style={{ fontSize: '13px' }}>{el?.stat?.name}</p>
                      <p>{`${el?.base_stat}%`}</p>
                      <Progress
                        width={'50%'}
                        bgColor={
                          el?.base_stat > 0 && el?.base_stat < 50
                            ? 'red'
                            : el?.base_stat > 50 && el?.base_stat < 70
                            ? 'orange'
                            : 'green'
                        }
                      />
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )}

        {selectedView === 'card' && (
          <div className={styles.card_wrap}>
            <CardView characters={data?.results} displayStats={displayStats} />
          </div>
        )}

        <div className={styles.line}></div>
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const res = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=151`);
  const data = await res.json();

  return { props: { data } };
}
